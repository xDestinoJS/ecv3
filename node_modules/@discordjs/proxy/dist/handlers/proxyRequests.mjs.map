{"version":3,"file":"proxyRequests.mjs","sources":["../../src/handlers/proxyRequests.ts"],"sourcesContent":["import { URL } from 'node:url';\nimport { DiscordAPIError, HTTPError, RateLimitError, RequestMethod, REST, RouteLike } from '@discordjs/rest';\nimport {\n\tpopulateAbortErrorResponse,\n\tpopulateGeneralErrorResponse,\n\tpopulateSuccessfulResponse,\n\tpopulateRatelimitErrorResponse,\n} from '../util/responseHelpers';\nimport type { RequestHandler } from '../util/util';\n\n/**\n * Creates an HTTP handler used to forward requests to Discord\n *\n * @param rest - REST instance to use for the requests\n */\nexport function proxyRequests(rest: REST): RequestHandler {\n\treturn async (req, res) => {\n\t\tconst { method, url } = req;\n\n\t\tif (!method || !url) {\n\t\t\tthrow new TypeError(\n\t\t\t\t'Invalid request. Missing method and/or url, implying that this is not a Server IncomingMesage',\n\t\t\t);\n\t\t}\n\n\t\t// The 2nd parameter is here so the URL constructor doesn't complain about an \"invalid url\" when the origin is missing\n\t\t// we don't actually care about the origin and the value passed is irrelevant\n\t\tconst fullRoute = new URL(url, 'http://noop').pathname.replace(/^\\/api(\\/v\\d+)?/, '') as RouteLike;\n\n\t\ttry {\n\t\t\tconst discordResponse = await rest.raw({\n\t\t\t\tbody: req,\n\t\t\t\tfullRoute,\n\t\t\t\t// This type cast is technically incorrect, but we want Discord to throw Method Not Allowed for us\n\t\t\t\tmethod: method as RequestMethod,\n\t\t\t\tpassThroughBody: true,\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': req.headers['content-type']!,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tawait populateSuccessfulResponse(res, discordResponse);\n\t\t} catch (error) {\n\t\t\tif (error instanceof DiscordAPIError || error instanceof HTTPError) {\n\t\t\t\tpopulateGeneralErrorResponse(res, error);\n\t\t\t} else if (error instanceof RateLimitError) {\n\t\t\t\tpopulateRatelimitErrorResponse(res, error);\n\t\t\t} else if (error instanceof Error && error.name === 'AbortError') {\n\t\t\t\tpopulateAbortErrorResponse(res);\n\t\t\t} else {\n\t\t\t\t// Unclear if there's better course of action here for unknown erorrs. Any web framework allows to pass in an error handler for something like this\n\t\t\t\t// at which point the user could dictate what to do with the error - otherwise we could just 500\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t} finally {\n\t\t\tres.end();\n\t\t}\n\t};\n}\n"],"names":[],"mappings":";;;;AAQO,SAAS,aAAa,CAAC,IAAI,EAAE;AACpC,EAAE,OAAO,OAAO,GAAG,EAAE,GAAG,KAAK;AAC7B,IAAI,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;AAChC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,EAAE;AACzB,MAAM,MAAM,IAAI,SAAS,CAAC,+FAA+F,CAAC,CAAC;AAC3H,KAAK;AACL,IAAI,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;AAC1F,IAAI,IAAI;AACR,MAAM,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC;AAC7C,QAAQ,IAAI,EAAE,GAAG;AACjB,QAAQ,SAAS;AACjB,QAAQ,MAAM;AACd,QAAQ,eAAe,EAAE,IAAI;AAC7B,QAAQ,OAAO,EAAE;AACjB,UAAU,cAAc,EAAE,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC;AACrD,SAAS;AACT,OAAO,CAAC,CAAC;AACT,MAAM,MAAM,0BAA0B,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;AAC7D,KAAK,CAAC,OAAO,KAAK,EAAE;AACpB,MAAM,IAAI,KAAK,YAAY,eAAe,IAAI,KAAK,YAAY,SAAS,EAAE;AAC1E,QAAQ,4BAA4B,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACjD,OAAO,MAAM,IAAI,KAAK,YAAY,cAAc,EAAE;AAClD,QAAQ,8BAA8B,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACnD,OAAO,MAAM,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE;AACxE,QAAQ,0BAA0B,CAAC,GAAG,CAAC,CAAC;AACxC,OAAO,MAAM;AACb,QAAQ,MAAM,KAAK,CAAC;AACpB,OAAO;AACP,KAAK,SAAS;AACd,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;AAChB,KAAK;AACL,GAAG,CAAC;AACJ;;;;"}