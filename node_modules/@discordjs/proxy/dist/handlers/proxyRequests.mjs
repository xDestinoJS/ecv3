import { URL } from 'node:url';
import { DiscordAPIError, HTTPError, RateLimitError } from '@discordjs/rest';
import { populateSuccessfulResponse, populateGeneralErrorResponse, populateRatelimitErrorResponse, populateAbortErrorResponse } from '../util/responseHelpers.mjs';

function proxyRequests(rest) {
  return async (req, res) => {
    const { method, url } = req;
    if (!method || !url) {
      throw new TypeError("Invalid request. Missing method and/or url, implying that this is not a Server IncomingMesage");
    }
    const fullRoute = new URL(url, "http://noop").pathname.replace(/^\/api(\/v\d+)?/, "");
    try {
      const discordResponse = await rest.raw({
        body: req,
        fullRoute,
        method,
        passThroughBody: true,
        headers: {
          "Content-Type": req.headers["content-type"]
        }
      });
      await populateSuccessfulResponse(res, discordResponse);
    } catch (error) {
      if (error instanceof DiscordAPIError || error instanceof HTTPError) {
        populateGeneralErrorResponse(res, error);
      } else if (error instanceof RateLimitError) {
        populateRatelimitErrorResponse(res, error);
      } else if (error instanceof Error && error.name === "AbortError") {
        populateAbortErrorResponse(res);
      } else {
        throw error;
      }
    } finally {
      res.end();
    }
  };
}

export { proxyRequests };
//# sourceMappingURL=proxyRequests.mjs.map
